                     Problems with areaDetector HDF5 plugin
                                 Feb. 26, 2015
                                   Mark Rivers

Pete Jemian and Jan Ilavsky have found a number of problems with the current version of the 
HDF5 plugin in ADCore/master.

In order to document and attempt to fix these problems I have done the following:

- Created a new branch of ADCore called hdf5-bugfix.  This is a tracking branch and has been 
pushed to hithub.

- In that branch created a new iocs/simDetectorIOC/iocBoot/iocHDF5Test directory.
This directory contains the following:

- test1_attributes.xml  
A simple attributes file to load into simDetector.  
Pete previously called this file simple_pv_attributes.xml.

- test1_layout.xml
A simple HDF5 layout file to be used with test1_attributes.xml
Pete previously called this file simple_pv_layout.xml

- test2_attributes.xml
A more complex attributes file.  It gets many PARAM attributes from simDetector.
Pete previously called this file attributes.xml, and I think they were using it on the 9-ID beamline.

- test2_layout.xml
A more complex layout file to be used with test2_attributes.xml.

With these two sets of test files a number of problems with the HDF5 plugin have been found.

These problems include:

1) Requested hard links are not created when the dataset is from an EPICS_PV ndattribute.
This problem is found when running the current master branch on the test2 files.  
The errors are captured in test2_master_ioc_error.txt.  These errors include the following:
#000: H5L.c line 518 in H5Lcreate_hard(): unable to create link
...
2015/02/26 13:35:55.712 NDFileHDF5::createHardLinks error creating hard link from: /entry/instrument/attenuator/filterTrans to /entry/instrument/attenuator/attenuator_transmission

I was able to fix this problem.  I moved the location of the call to HDF5::createHardLinks 
from the HDF5::openFile function to to HDF5::closeFile function.  The linked objects did not
exist yet when HDF5::createHardLinks was called from the HDF5::openFile function.  That changed
has been committed to the hdf5-bugfix branch.

2) Requested hard links are still not created under some circumstances.
This problem is found when running the current bugfix branch that fixes problem 1) above
on the test1 files.  The errors are captured in test1_branch_fix1_ioc_error.txt.  These errors include the following:
HDF5-DIAG: Error detected in HDF5 (1.8.7) thread 0:
#000: H5L.c line 518 in H5Lcreate_hard(): unable to create link
...
2015/02/26 13:42:03.228 NDFileHDF5::createHardLinks error creating hard link from: /example/this_file_name to /example/data_link_in_same_group

Is this because either the source or target of the hardlink is in the outermost group, "/entry"?

3) Some requested datasets are actually stored as attributes of parent group
This problem is illustrated in the test2 files.  test2_layout.xml contains the following lines:
    <group name="entry"> 
        <attribute name="NX_class" source="constant" value="NXentry" type="string" />
...
        <dataset name="start_time"     ndattribute="StartTime"      source="ndattribute" />

The resulting HDF5 file should thus contain a dataset called "start_time".  
However, it does not, rather it contains an ATTRIBUTE called "StartTime as shown by the following hfdump output:

      ATTRIBUTE "StartTime" {
         DATATYPE  H5T_STRING {
               STRSIZE 18;
               STRPAD H5T_STR_NULLTERM;
               CSET H5T_CSET_ASCII;
               CTYPE H5T_C_S1;
            }
         DATASPACE  SCALAR
         DATA {
         (0): "Simulated detector"
         }
      }

This problem does not always occur.  For example the following lines are also in test2_layout.xml
            <dataset name="integral"    source="ndattribute" ndattribute="I0_cts" />

The hdf5 file contains the following:
         DATASET "integral" {
            DATATYPE  H5T_IEEE_F64LE
            DATASPACE  SIMPLE { ( 5 ) / ( 5 ) }
            DATA {
            (0): 0.001, 0, 0, 0, 0
            }
            ATTRIBUTE "description" {
               DATATYPE  H5T_STRING {
                     STRSIZE 9;
                     STRPAD H5T_STR_NULLTERM;
                     CSET H5T_CSET_ASCII;
                     CTYPE H5T_C_S1;
                  }
               DATASPACE  SCALAR
               DATA {
               (0): "I0 counts"
               }
            }
            ATTRIBUTE "source" {
               DATATYPE  H5T_STRING {
                     STRSIZE 8;
                     STRPAD H5T_STR_NULLTERM;
                     CSET H5T_CSET_ASCII;
                     CTYPE H5T_C_S1;
                  }
               DATASPACE  SCALAR
               DATA {
               (0): "ACQ_TIME"
               }
            }
         }

So in this case the dataset defined in the xml file does appear as a DATASET and not an ATTRIBUTE
in the HDF5 file.  Why does it sometimes fail?  
It is when the datasets are defined in the outermost group, "/entry"?

4) Unrequested attributes appear in file
In the h5dump output above for the "integral" dataset it can be seen that the HDF5 plugin automatically
adds two additional attributes for the dataset, "description" and "source".
Pete objects to this, he feels that the user should be able to control whether such attributes
are present and what they are called, to avoid possible name conflicts.
In my opinion these attributes are very useful, and the user would almost always want them.
In fact I think two additional attributes should be added: "name" (the name of the NDAttribute) 
and "type" (the NDAttrSource_t type of the attribute, e.g. DRIVER, PARAM, EPICS_PV, or FUNCTION).
However, I see Pete's point about name conflicts.  Could we use a namespace for these attributes
and call them NDDescription, NDSource, NDName, and NDType to minimize the chance of conflicts?

5) Attributes defined for datasets in the xml file do not always appear in the HDF5 file.
This problem is seen in the test2 files.  test2_layout.xml contains the following lines:
            <dataset name="aequatorial_angle" source="ndattribute" ndattribute="sa">
                <attribute name="units"       source="constant"    value="degrees" type="string" />
            </dataset>

However, the HDF5 file contains the following:

         DATASET "aequatorial_angle" {
            DATATYPE  H5T_IEEE_F64LE
            DATASPACE  SIMPLE { ( 5 ) / ( 5 ) }
            DATA {
            (0): 0.001, 0, 0, 0, 0
            }
            ATTRIBUTE "description" {
               DATATYPE  H5T_STRING {
                     STRSIZE 34;
                     STRPAD H5T_STR_NULLTERM;
                     CSET H5T_CSET_ASCII;
                     CTYPE H5T_C_S1;
                  }
               DATASPACE  SCALAR
               DATA {
               (0): "sample azimuthal rotation, degrees"
               }
            }
            ATTRIBUTE "source" {
               DATATYPE  H5T_STRING {
                     STRSIZE 8;
                     STRPAD H5T_STR_NULLTERM;
                     CSET H5T_CSET_ASCII;
                     CTYPE H5T_C_S1;
                  }
               DATASPACE  SCALAR
               DATA {
               (0): "ACQ_TIME"
               }
            }
         }
Note that it contains the "automatic" attributes "description" and "source" discussed above, but it does not contain
the requested attribute "units".

6) If the xml layout file does not define a group with “ndattr_default=true” it crashes the application.
This can be seen by using the file test2_layout_no_ndattr_default.xml.  This file is the same as
test2_layout.xml except the following group was deleted:
            <group name="NDattributes" ndattr_default="true"> 
                <attribute name="NX_class" source="constant" value="NXcollection" type="string" />
                <!-- contains any attributes not described elsewhere-->
            </group>              <!-- NXcollection -->
Trying to save a file with this xml file will crash simDetector application.


