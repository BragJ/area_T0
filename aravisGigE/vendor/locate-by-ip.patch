--- vendor/aravis/src/arvgvinterface.c	2014-09-05 10:18:53.832678198 +0100
+++ vendor/aravis/src/arvgvinterface.c.new	2014-09-05 10:18:40.859432533 +0100
@@ -398,6 +398,74 @@
 	}
 }
 
+static GInetAddress * arv_gv_interface_camera_locate(ArvGvInterface *gv_interface, GInetAddress *device_address) {
+	ArvGvDiscoverSocketList *socket_list;
+	ArvGvcpPacket *packet;
+	GInetAddress *interface_address = NULL;
+	char buffer[ARV_GV_INTERFACE_SOCKET_BUFFER_SIZE];
+	GSList *iter;
+	size_t size;
+	int i, count;
+
+	socket_list = arv_gv_discover_socket_list_new ();
+
+	if (socket_list->n_sockets < 1) {
+		arv_gv_discover_socket_list_free (socket_list);
+		return interface_address;
+	}
+
+	/* Just read a random register from the camera socket */
+	packet = arv_gvcp_packet_new_read_register_cmd(ARV_GVBS_N_STREAM_CHANNELS_OFFSET, 0, &size);
+	GSocketAddress *device_socket_address = g_inet_socket_address_new(device_address, ARV_GVCP_PORT);
+
+	for (iter = socket_list->sockets; iter != NULL; iter = iter->next) {
+		ArvGvDiscoverSocket *socket = iter->data;
+		GError *error = NULL;
+		g_socket_send_to (socket->socket,
+				  device_socket_address,
+				  (const char *) packet, size,
+				  NULL, &error);
+		if (error != NULL) {
+			arv_warning_interface ("[ArvGVInterface::arv_gv_interface_camera_locate] Error: %s", error->message);
+			g_error_free (error);
+		}
+	}
+
+	arv_gvcp_packet_free (packet);
+
+	do {
+		/* Now parse the result */
+		if (g_poll (socket_list->poll_fds, socket_list->n_sockets, ARV_GV_INTERFACE_DISCOVERY_TIMEOUT_MS) == 0) {
+			arv_gv_discover_socket_list_free (socket_list);
+			return interface_address;
+		}
+
+		for (i = 0, iter = socket_list->sockets; iter != NULL; i++, iter = iter->next) {
+			ArvGvDiscoverSocket *socket = iter->data;
+
+			do {
+				g_socket_set_blocking (socket->socket, FALSE);
+				count = g_socket_receive (socket->socket, buffer, ARV_GV_INTERFACE_SOCKET_BUFFER_SIZE,
+							  NULL, NULL);
+				g_socket_set_blocking (socket->socket, TRUE);
+
+				if (count > 0) {
+					ArvGvcpPacket *packet = (ArvGvcpPacket *) buffer;
+					if (g_ntohs (packet->header.command) == ARV_GVCP_COMMAND_READ_REGISTER_CMD ||
+					    g_ntohs (packet->header.command) == ARV_GVCP_COMMAND_READ_REGISTER_ACK) {
+						interface_address = g_inet_socket_address_get_address(G_INET_SOCKET_ADDRESS (socket->interface_address));
+						g_object_ref(interface_address);
+						arv_gv_discover_socket_list_free (socket_list);
+						return interface_address;
+					}
+				}
+			} while (count > 0);
+		}
+	} while (1);
+	arv_gv_discover_socket_list_free (socket_list);
+	return interface_address;
+}
+
 static ArvDevice *
 arv_gv_interface_open_device (ArvInterface *interface, const char *device_id)
 {
@@ -417,6 +485,21 @@
 	} else
 		device_infos = g_hash_table_lookup (gv_interface->priv->devices, device_id);
 
+	if (device_infos == NULL) {
+	   /* This is probably an IP address */
+	   device_address = g_inet_address_new_from_string(device_id);
+	   if (device_address != NULL) {
+		   /* Try and find an interface that the camera will respond on */
+		   GInetAddress *interface_address = arv_gv_interface_camera_locate(gv_interface, device_address);
+		   if (interface_address != NULL) {
+			   device = arv_gv_device_new (interface_address, device_address);
+			   g_object_unref (interface_address);
+		   }
+		   g_object_unref (device_address);
+		   return device;
+	   }
+	}
+
 	if (device_infos == NULL)
 		return NULL;
 
Index: vendor/aravis/src/arvbuffer.c
===================================================================
--- vendor/aravis/src/arvbuffer.c	(revision 119487)
+++ vendor/aravis/src/arvbuffer.c	(working copy)
@@ -157,6 +157,25 @@
 	return buffer->priv->data;
 }
 
+/**
+ * arv_buffer_get_user_data:
+ * @buffer: a #ArvBuffer
+ *
+ * Buffer user data accessor.
+ *
+ * Returns: a pointer to the user data specified in #arv_buffer_new_full.
+ *
+ * Since: 0.4.0
+ **/
+
+const void *
+arv_buffer_get_user_data (ArvBuffer *buffer)
+{
+	g_return_val_if_fail (ARV_IS_BUFFER (buffer), NULL);
+
+	return buffer->priv->user_data;
+}
+
 typedef struct ARAVIS_PACKED_STRUCTURE {
 	guint32 id;
 	guint32 size;
Index: vendor/aravis/src/arvbuffer.h
===================================================================
--- vendor/aravis/src/arvbuffer.h	(revision 119487)
+++ vendor/aravis/src/arvbuffer.h	(working copy)
@@ -113,6 +113,7 @@
 ArvBufferPayloadType	arv_buffer_get_payload_type	(ArvBuffer *buffer);
 guint64			arv_buffer_get_timestamp	(ArvBuffer *buffer);
 const void *		arv_buffer_get_data		(ArvBuffer *buffer, size_t *size);
+const void *		arv_buffer_get_user_data (ArvBuffer *buffer);
 
 void			arv_buffer_get_image_region		(ArvBuffer *buffer, gint *x, gint *y, gint *width, gint *height);
 gint			arv_buffer_get_image_width		(ArvBuffer *buffer);
Index: vendor/aravis/src/arvstream.h
===================================================================
--- vendor/aravis/src/arvstream.h	(revision 119487)
+++ vendor/aravis/src/arvstream.h	(working copy)
@@ -89,6 +89,8 @@
 void 		arv_stream_set_emit_signals 		(ArvStream *stream, gboolean emit_signals);
 gboolean 	arv_stream_get_emit_signals 		(ArvStream *stream);
 
+ArvBuffer * arv_stream_pop_input_buffer (ArvStream *stream);
+
 G_END_DECLS
 
 #endif
