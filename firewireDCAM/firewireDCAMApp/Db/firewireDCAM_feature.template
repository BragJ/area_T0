#! Generated by VisualDCT v2.6
#! DBDSTART
#! DBD("../../dbd/firewireDCAM_vdct.dbd")
#! DBDEND


template() {

  #! InputMacro(NUM,"",40,400,16777215,1,true)
  #! InputMacro(FEAT,"",100,220,16777215,1,true)
}

# ---------------- Feature $(FEAT) control ----------------
# Set the $(FEAT) value (int32)
# % gdatag, pv, rw, $(PORT)_firewireDCAM, $(FEAT), Set $(FEAT)
record(ao, "$(P)$(R)$(FEAT)") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) $(NUM))FDC_FEAT_VAL")
}

# Read the $(FEAT) value (int32)
# % gdatag, pv, ro, $(PORT)_firewireDCAM, $(FEAT)_RBV, Readback for $(FEAT)
record(ai, "$(P)$(R)$(FEAT)_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) $(NUM))FDC_FEAT_VAL")
}

## Set the $(FEAT) control mode (manual = user configured /auto = camera sets values)
# % gdatag, binary, rw, $(PORT)_firewireDCAM, $(FEAT)_CTRL, Set $(FEAT) Control Manual or Auto
record(bo, "$(P)$(R)$(FEAT)_CTRL") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) $(NUM))FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read back the $(FEAT) control mode
# % gdatag, binary, ro, $(PORT)_firewireDCAM, $(FEAT)_CTRL_RBV, Readback for $(FEAT) Control Manual or Auto
record(bi, "$(P)$(R)$(FEAT)_CTRL_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) $(NUM))FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read whether the camera supports this feature
# % gdatag, binary, ro, $(PORT)_firewireDCAM, $(FEAT)_AVL, Availability of $(FEAT)
record(bi, "$(P)$(R)$(FEAT)_AVL") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) $(NUM))FDC_FEAT_AVAILABLE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Read $(FEAT) boundaries
# % gdatag, pv, ro, $(PORT)_firewireDCAM, $(FEAT)_MIN, Minimum value of $(FEAT)
record(ai, "$(P)$(R)$(FEAT)_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) $(NUM))FDC_FEAT_VAL_MIN")
}

# % gdatag, pv, ro, $(PORT)_firewireDCAM, $(FEAT)_MAX, Maximum value of $(FEAT)
record(ai, "$(P)$(R)$(FEAT)_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) $(NUM))FDC_FEAT_VAL_MAX")
}

## Read whether the camera supports absolute (floating point) control of this feature
# % gdatag, binary, ro, $(PORT)_firewireDCAM, $(FEAT)_ABS_AVL, Availability of absolute control of $(FEAT)
record(bi, "$(P)$(R)$(FEAT)_ABS_AVL") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) $(NUM))FDC_FEAT_ABSOLUTE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Set the feature absolute value (floating point)
# % gdatag, pv, rw, $(PORT)_firewireDCAM, $(FEAT)_ABS, Set absolute value of $(FEAT)
record(ao, "$(P)$(R)$(FEAT)_ABS") {
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT) $(NUM))FDC_FEAT_VAL_ABS")
  field(PREC, "3")
}

# Read the feature absolute value
# % gdatag, pv, ro, $(PORT)_firewireDCAM, $(FEAT)_ABS_RBV, Readback absolute value of $(FEAT)
record(ai, "$(P)$(R)$(FEAT)_ABS_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) $(NUM))FDC_FEAT_VAL_ABS")
  field(PREC, "3")
}

# Read the feature absolute value max boundary
# % gdatag, pv, ro, $(PORT)_firewireDCAM, $(FEAT)_ABS_MAX, Maximum absolute value of $(FEAT)
record(ai, "$(P)$(R)$(FEAT)_ABS_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) $(NUM))FDC_FEAT_VAL_ABS_MAX")
  field(PREC, "3")
}

# Read the feature absolute value min boundary
# % gdatag, pv, ro, $(PORT)_firewireDCAM, $(FEAT)_ABS_MIN, Minimum absolute value of $(FEAT)
record(ai, "$(P)$(R)$(FEAT)_ABS_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) $(NUM))FDC_FEAT_VAL_ABS_MIN")
  field(PREC, "3")
}

#! Further lines contain data used by VisualDCT
#! View(0,0,1.0)
#! Record("$(P)$(R)$(FEAT)",20,16,0,0,"$(P)$(R)$(FEAT)")
#! Record("$(P)$(R)$(FEAT)_RBV",260,22,0,0,"$(P)$(R)$(FEAT)_RBV")
#! Record("$(P)$(R)$(FEAT)_CTRL",500,28,0,0,"$(P)$(R)$(FEAT)_CTRL")
#! Record("$(P)$(R)$(FEAT)_CTRL_RBV",740,14,0,0,"$(P)$(R)$(FEAT)_CTRL_RBV")
#! Record("$(P)$(R)$(FEAT)_AVL",980,14,0,0,"$(P)$(R)$(FEAT)_AVL")
#! Record("$(P)$(R)$(FEAT)_MIN",1220,22,0,0,"$(P)$(R)$(FEAT)_MIN")
#! Record("$(P)$(R)$(FEAT)_MAX",1460,22,0,0,"$(P)$(R)$(FEAT)_MAX")
#! Record("$(P)$(R)$(FEAT)_ABS_AVL",1700,14,0,0,"$(P)$(R)$(FEAT)_ABS_AVL")
#! Record("$(P)$(R)$(FEAT)_ABS",1940,22,0,0,"$(P)$(R)$(FEAT)_ABS")
#! Record("$(P)$(R)$(FEAT)_ABS_RBV",2180,8,0,0,"$(P)$(R)$(FEAT)_ABS_RBV")
#! Record("$(P)$(R)$(FEAT)_ABS_MAX",2420,8,0,0,"$(P)$(R)$(FEAT)_ABS_MAX")
#! Record("$(P)$(R)$(FEAT)_ABS_MIN",2660,8,0,0,"$(P)$(R)$(FEAT)_ABS_MIN")
